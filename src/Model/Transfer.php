<?php
/**
 * Transfer
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\finance
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eBay Finances API
 *
 * This API is used to retrieve seller payouts and monetary transaction details related to those payouts.
 *
 * The version of the OpenAPI document: 1.4.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\finance\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\finance\ObjectSerializer;

/**
 * Transfer Class Doc Comment
 *
 * @category Class
 * @description This type is the base response type used by TRANSFER transaction type that is returned in the response.
 * @package  macropage\SDKs\ebay\rest\finance
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Transfer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Transfer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fundingSource' => '\macropage\SDKs\ebay\rest\finance\Model\FundingSource',
        'transactionDate' => 'string',
        'transferAmount' => '\macropage\SDKs\ebay\rest\finance\Model\Amount',
        'transferDetail' => '\macropage\SDKs\ebay\rest\finance\Model\TransferDetail',
        'transferId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'fundingSource' => null,
        'transactionDate' => null,
        'transferAmount' => null,
        'transferDetail' => null,
        'transferId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fundingSource' => 'fundingSource',
        'transactionDate' => 'transactionDate',
        'transferAmount' => 'transferAmount',
        'transferDetail' => 'transferDetail',
        'transferId' => 'transferId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fundingSource' => 'setFundingSource',
        'transactionDate' => 'setTransactionDate',
        'transferAmount' => 'setTransferAmount',
        'transferDetail' => 'setTransferDetail',
        'transferId' => 'setTransferId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fundingSource' => 'getFundingSource',
        'transactionDate' => 'getTransactionDate',
        'transferAmount' => 'getTransferAmount',
        'transferDetail' => 'getTransferDetail',
        'transferId' => 'getTransferId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fundingSource'] = isset($data['fundingSource']) ? $data['fundingSource'] : null;
        $this->container['transactionDate'] = isset($data['transactionDate']) ? $data['transactionDate'] : null;
        $this->container['transferAmount'] = isset($data['transferAmount']) ? $data['transferAmount'] : null;
        $this->container['transferDetail'] = isset($data['transferDetail']) ? $data['transferDetail'] : null;
        $this->container['transferId'] = isset($data['transferId']) ? $data['transferId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fundingSource
     *
     * @return \macropage\SDKs\ebay\rest\finance\Model\FundingSource|null
     */
    public function getFundingSource()
    {
        return $this->container['fundingSource'];
    }

    /**
     * Sets fundingSource
     *
     * @param \macropage\SDKs\ebay\rest\finance\Model\FundingSource|null $fundingSource fundingSource
     *
     * @return $this
     */
    public function setFundingSource($fundingSource)
    {
        $this->container['fundingSource'] = $fundingSource;

        return $this;
    }

    /**
     * Gets transactionDate
     *
     * @return string|null
     */
    public function getTransactionDate()
    {
        return $this->container['transactionDate'];
    }

    /**
     * Sets transactionDate
     *
     * @param string|null $transactionDate This timestamp indicates the date/time of the transfer. The following (UTC) format is used: YYYY-MM-DDTHH:MM:SS.SSSZ. For example, 2020-08-04T19:09:02.768Z
     *
     * @return $this
     */
    public function setTransactionDate($transactionDate)
    {
        $this->container['transactionDate'] = $transactionDate;

        return $this;
    }

    /**
     * Gets transferAmount
     *
     * @return \macropage\SDKs\ebay\rest\finance\Model\Amount|null
     */
    public function getTransferAmount()
    {
        return $this->container['transferAmount'];
    }

    /**
     * Sets transferAmount
     *
     * @param \macropage\SDKs\ebay\rest\finance\Model\Amount|null $transferAmount transferAmount
     *
     * @return $this
     */
    public function setTransferAmount($transferAmount)
    {
        $this->container['transferAmount'] = $transferAmount;

        return $this;
    }

    /**
     * Gets transferDetail
     *
     * @return \macropage\SDKs\ebay\rest\finance\Model\TransferDetail|null
     */
    public function getTransferDetail()
    {
        return $this->container['transferDetail'];
    }

    /**
     * Sets transferDetail
     *
     * @param \macropage\SDKs\ebay\rest\finance\Model\TransferDetail|null $transferDetail transferDetail
     *
     * @return $this
     */
    public function setTransferDetail($transferDetail)
    {
        $this->container['transferDetail'] = $transferDetail;

        return $this;
    }

    /**
     * Gets transferId
     *
     * @return string|null
     */
    public function getTransferId()
    {
        return $this->container['transferId'];
    }

    /**
     * Sets transferId
     *
     * @param string|null $transferId The unique identifier of the TRANSFER transaction type. This is the same value that was passed into the end of the call URI.
     *
     * @return $this
     */
    public function setTransferId($transferId)
    {
        $this->container['transferId'] = $transferId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


