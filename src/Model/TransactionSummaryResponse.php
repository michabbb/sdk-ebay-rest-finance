<?php
/**
 * TransactionSummaryResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\finance
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eBay Finances API
 *
 * This API is used to retrieve seller payouts and monetary transaction details related to those payouts.
 *
 * The version of the OpenAPI document: 1.9.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\finance\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\finance\ObjectSerializer;

/**
 * TransactionSummaryResponse Class Doc Comment
 *
 * @category Class
 * @description This type is the base response type of the &lt;strong&gt;getTransactionSummary&lt;/strong&gt; method, and based on the filters that are used in the &lt;strong&gt;getTransactionSummary&lt;/strong&gt; call URI, the response may include  total count and amount of the seller&#39;s sales and credits, total count and amount of buyer refunds, and total count and amount of seller payment holds.
 * @package  macropage\SDKs\ebay\rest\finance
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TransactionSummaryResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionSummaryResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'adjustmentAmount' => '\macropage\SDKs\ebay\rest\finance\Model\Amount',
        'adjustmentBookingEntry' => 'string',
        'adjustmentCount' => 'int',
        'balanceTransferAmount' => '\macropage\SDKs\ebay\rest\finance\Model\Amount',
        'balanceTransferBookingEntry' => 'string',
        'balanceTransferCount' => 'int',
        'creditAmount' => '\macropage\SDKs\ebay\rest\finance\Model\Amount',
        'creditBookingEntry' => 'string',
        'creditCount' => 'int',
        'disputeAmount' => '\macropage\SDKs\ebay\rest\finance\Model\Amount',
        'disputeBookingEntry' => 'string',
        'disputeCount' => 'int',
        'nonSaleChargeAmount' => '\macropage\SDKs\ebay\rest\finance\Model\Amount',
        'nonSaleChargeBookingEntry' => 'string',
        'nonSaleChargeCount' => 'int',
        'onHoldAmount' => '\macropage\SDKs\ebay\rest\finance\Model\Amount',
        'onHoldBookingEntry' => 'string',
        'onHoldCount' => 'int',
        'refundAmount' => '\macropage\SDKs\ebay\rest\finance\Model\Amount',
        'refundBookingEntry' => 'string',
        'refundCount' => 'int',
        'shippingLabelAmount' => '\macropage\SDKs\ebay\rest\finance\Model\Amount',
        'shippingLabelBookingEntry' => 'string',
        'shippingLabelCount' => 'int',
        'transferAmount' => '\macropage\SDKs\ebay\rest\finance\Model\Amount',
        'transferBookingEntry' => 'string',
        'transferCount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'adjustmentAmount' => null,
        'adjustmentBookingEntry' => null,
        'adjustmentCount' => 'int32',
        'balanceTransferAmount' => null,
        'balanceTransferBookingEntry' => null,
        'balanceTransferCount' => 'int32',
        'creditAmount' => null,
        'creditBookingEntry' => null,
        'creditCount' => 'int32',
        'disputeAmount' => null,
        'disputeBookingEntry' => null,
        'disputeCount' => 'int32',
        'nonSaleChargeAmount' => null,
        'nonSaleChargeBookingEntry' => null,
        'nonSaleChargeCount' => 'int32',
        'onHoldAmount' => null,
        'onHoldBookingEntry' => null,
        'onHoldCount' => 'int32',
        'refundAmount' => null,
        'refundBookingEntry' => null,
        'refundCount' => 'int32',
        'shippingLabelAmount' => null,
        'shippingLabelBookingEntry' => null,
        'shippingLabelCount' => 'int32',
        'transferAmount' => null,
        'transferBookingEntry' => null,
        'transferCount' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adjustmentAmount' => 'adjustmentAmount',
        'adjustmentBookingEntry' => 'adjustmentBookingEntry',
        'adjustmentCount' => 'adjustmentCount',
        'balanceTransferAmount' => 'balanceTransferAmount',
        'balanceTransferBookingEntry' => 'balanceTransferBookingEntry',
        'balanceTransferCount' => 'balanceTransferCount',
        'creditAmount' => 'creditAmount',
        'creditBookingEntry' => 'creditBookingEntry',
        'creditCount' => 'creditCount',
        'disputeAmount' => 'disputeAmount',
        'disputeBookingEntry' => 'disputeBookingEntry',
        'disputeCount' => 'disputeCount',
        'nonSaleChargeAmount' => 'nonSaleChargeAmount',
        'nonSaleChargeBookingEntry' => 'nonSaleChargeBookingEntry',
        'nonSaleChargeCount' => 'nonSaleChargeCount',
        'onHoldAmount' => 'onHoldAmount',
        'onHoldBookingEntry' => 'onHoldBookingEntry',
        'onHoldCount' => 'onHoldCount',
        'refundAmount' => 'refundAmount',
        'refundBookingEntry' => 'refundBookingEntry',
        'refundCount' => 'refundCount',
        'shippingLabelAmount' => 'shippingLabelAmount',
        'shippingLabelBookingEntry' => 'shippingLabelBookingEntry',
        'shippingLabelCount' => 'shippingLabelCount',
        'transferAmount' => 'transferAmount',
        'transferBookingEntry' => 'transferBookingEntry',
        'transferCount' => 'transferCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'adjustmentAmount' => 'setAdjustmentAmount',
        'adjustmentBookingEntry' => 'setAdjustmentBookingEntry',
        'adjustmentCount' => 'setAdjustmentCount',
        'balanceTransferAmount' => 'setBalanceTransferAmount',
        'balanceTransferBookingEntry' => 'setBalanceTransferBookingEntry',
        'balanceTransferCount' => 'setBalanceTransferCount',
        'creditAmount' => 'setCreditAmount',
        'creditBookingEntry' => 'setCreditBookingEntry',
        'creditCount' => 'setCreditCount',
        'disputeAmount' => 'setDisputeAmount',
        'disputeBookingEntry' => 'setDisputeBookingEntry',
        'disputeCount' => 'setDisputeCount',
        'nonSaleChargeAmount' => 'setNonSaleChargeAmount',
        'nonSaleChargeBookingEntry' => 'setNonSaleChargeBookingEntry',
        'nonSaleChargeCount' => 'setNonSaleChargeCount',
        'onHoldAmount' => 'setOnHoldAmount',
        'onHoldBookingEntry' => 'setOnHoldBookingEntry',
        'onHoldCount' => 'setOnHoldCount',
        'refundAmount' => 'setRefundAmount',
        'refundBookingEntry' => 'setRefundBookingEntry',
        'refundCount' => 'setRefundCount',
        'shippingLabelAmount' => 'setShippingLabelAmount',
        'shippingLabelBookingEntry' => 'setShippingLabelBookingEntry',
        'shippingLabelCount' => 'setShippingLabelCount',
        'transferAmount' => 'setTransferAmount',
        'transferBookingEntry' => 'setTransferBookingEntry',
        'transferCount' => 'setTransferCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'adjustmentAmount' => 'getAdjustmentAmount',
        'adjustmentBookingEntry' => 'getAdjustmentBookingEntry',
        'adjustmentCount' => 'getAdjustmentCount',
        'balanceTransferAmount' => 'getBalanceTransferAmount',
        'balanceTransferBookingEntry' => 'getBalanceTransferBookingEntry',
        'balanceTransferCount' => 'getBalanceTransferCount',
        'creditAmount' => 'getCreditAmount',
        'creditBookingEntry' => 'getCreditBookingEntry',
        'creditCount' => 'getCreditCount',
        'disputeAmount' => 'getDisputeAmount',
        'disputeBookingEntry' => 'getDisputeBookingEntry',
        'disputeCount' => 'getDisputeCount',
        'nonSaleChargeAmount' => 'getNonSaleChargeAmount',
        'nonSaleChargeBookingEntry' => 'getNonSaleChargeBookingEntry',
        'nonSaleChargeCount' => 'getNonSaleChargeCount',
        'onHoldAmount' => 'getOnHoldAmount',
        'onHoldBookingEntry' => 'getOnHoldBookingEntry',
        'onHoldCount' => 'getOnHoldCount',
        'refundAmount' => 'getRefundAmount',
        'refundBookingEntry' => 'getRefundBookingEntry',
        'refundCount' => 'getRefundCount',
        'shippingLabelAmount' => 'getShippingLabelAmount',
        'shippingLabelBookingEntry' => 'getShippingLabelBookingEntry',
        'shippingLabelCount' => 'getShippingLabelCount',
        'transferAmount' => 'getTransferAmount',
        'transferBookingEntry' => 'getTransferBookingEntry',
        'transferCount' => 'getTransferCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['adjustmentAmount'] = $data['adjustmentAmount'] ?? null;
        $this->container['adjustmentBookingEntry'] = $data['adjustmentBookingEntry'] ?? null;
        $this->container['adjustmentCount'] = $data['adjustmentCount'] ?? null;
        $this->container['balanceTransferAmount'] = $data['balanceTransferAmount'] ?? null;
        $this->container['balanceTransferBookingEntry'] = $data['balanceTransferBookingEntry'] ?? null;
        $this->container['balanceTransferCount'] = $data['balanceTransferCount'] ?? null;
        $this->container['creditAmount'] = $data['creditAmount'] ?? null;
        $this->container['creditBookingEntry'] = $data['creditBookingEntry'] ?? null;
        $this->container['creditCount'] = $data['creditCount'] ?? null;
        $this->container['disputeAmount'] = $data['disputeAmount'] ?? null;
        $this->container['disputeBookingEntry'] = $data['disputeBookingEntry'] ?? null;
        $this->container['disputeCount'] = $data['disputeCount'] ?? null;
        $this->container['nonSaleChargeAmount'] = $data['nonSaleChargeAmount'] ?? null;
        $this->container['nonSaleChargeBookingEntry'] = $data['nonSaleChargeBookingEntry'] ?? null;
        $this->container['nonSaleChargeCount'] = $data['nonSaleChargeCount'] ?? null;
        $this->container['onHoldAmount'] = $data['onHoldAmount'] ?? null;
        $this->container['onHoldBookingEntry'] = $data['onHoldBookingEntry'] ?? null;
        $this->container['onHoldCount'] = $data['onHoldCount'] ?? null;
        $this->container['refundAmount'] = $data['refundAmount'] ?? null;
        $this->container['refundBookingEntry'] = $data['refundBookingEntry'] ?? null;
        $this->container['refundCount'] = $data['refundCount'] ?? null;
        $this->container['shippingLabelAmount'] = $data['shippingLabelAmount'] ?? null;
        $this->container['shippingLabelBookingEntry'] = $data['shippingLabelBookingEntry'] ?? null;
        $this->container['shippingLabelCount'] = $data['shippingLabelCount'] ?? null;
        $this->container['transferAmount'] = $data['transferAmount'] ?? null;
        $this->container['transferBookingEntry'] = $data['transferBookingEntry'] ?? null;
        $this->container['transferCount'] = $data['transferCount'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets adjustmentAmount
     *
     * @return \macropage\SDKs\ebay\rest\finance\Model\Amount|null
     */
    public function getAdjustmentAmount()
    {
        return $this->container['adjustmentAmount'];
    }

    /**
     * Sets adjustmentAmount
     *
     * @param \macropage\SDKs\ebay\rest\finance\Model\Amount|null $adjustmentAmount adjustmentAmount
     *
     * @return self
     */
    public function setAdjustmentAmount($adjustmentAmount)
    {
        $this->container['adjustmentAmount'] = $adjustmentAmount;

        return $this;
    }

    /**
     * Gets adjustmentBookingEntry
     *
     * @return string|null
     */
    public function getAdjustmentBookingEntry()
    {
        return $this->container['adjustmentBookingEntry'];
    }

    /**
     * Sets adjustmentBookingEntry
     *
     * @param string|null $adjustmentBookingEntry The credit debit sign indicator for adjustment. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setAdjustmentBookingEntry($adjustmentBookingEntry)
    {
        $this->container['adjustmentBookingEntry'] = $adjustmentBookingEntry;

        return $this;
    }

    /**
     * Gets adjustmentCount
     *
     * @return int|null
     */
    public function getAdjustmentCount()
    {
        return $this->container['adjustmentCount'];
    }

    /**
     * Sets adjustmentCount
     *
     * @param int|null $adjustmentCount Total adjustment count for given payee within a specified period.
     *
     * @return self
     */
    public function setAdjustmentCount($adjustmentCount)
    {
        $this->container['adjustmentCount'] = $adjustmentCount;

        return $this;
    }

    /**
     * Gets balanceTransferAmount
     *
     * @return \macropage\SDKs\ebay\rest\finance\Model\Amount|null
     */
    public function getBalanceTransferAmount()
    {
        return $this->container['balanceTransferAmount'];
    }

    /**
     * Sets balanceTransferAmount
     *
     * @param \macropage\SDKs\ebay\rest\finance\Model\Amount|null $balanceTransferAmount balanceTransferAmount
     *
     * @return self
     */
    public function setBalanceTransferAmount($balanceTransferAmount)
    {
        $this->container['balanceTransferAmount'] = $balanceTransferAmount;

        return $this;
    }

    /**
     * Gets balanceTransferBookingEntry
     *
     * @return string|null
     */
    public function getBalanceTransferBookingEntry()
    {
        return $this->container['balanceTransferBookingEntry'];
    }

    /**
     * Sets balanceTransferBookingEntry
     *
     * @param string|null $balanceTransferBookingEntry The credit debit sign indicator for the balance transfer. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setBalanceTransferBookingEntry($balanceTransferBookingEntry)
    {
        $this->container['balanceTransferBookingEntry'] = $balanceTransferBookingEntry;

        return $this;
    }

    /**
     * Gets balanceTransferCount
     *
     * @return int|null
     */
    public function getBalanceTransferCount()
    {
        return $this->container['balanceTransferCount'];
    }

    /**
     * Sets balanceTransferCount
     *
     * @param int|null $balanceTransferCount The total balance transfer count for given payee within the specified period.
     *
     * @return self
     */
    public function setBalanceTransferCount($balanceTransferCount)
    {
        $this->container['balanceTransferCount'] = $balanceTransferCount;

        return $this;
    }

    /**
     * Gets creditAmount
     *
     * @return \macropage\SDKs\ebay\rest\finance\Model\Amount|null
     */
    public function getCreditAmount()
    {
        return $this->container['creditAmount'];
    }

    /**
     * Sets creditAmount
     *
     * @param \macropage\SDKs\ebay\rest\finance\Model\Amount|null $creditAmount creditAmount
     *
     * @return self
     */
    public function setCreditAmount($creditAmount)
    {
        $this->container['creditAmount'] = $creditAmount;

        return $this;
    }

    /**
     * Gets creditBookingEntry
     *
     * @return string|null
     */
    public function getCreditBookingEntry()
    {
        return $this->container['creditBookingEntry'];
    }

    /**
     * Sets creditBookingEntry
     *
     * @param string|null $creditBookingEntry The enumeration value indicates whether the dollar amount in the <strong>creditAmount</strong> field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be <code>CREDIT</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setCreditBookingEntry($creditBookingEntry)
    {
        $this->container['creditBookingEntry'] = $creditBookingEntry;

        return $this;
    }

    /**
     * Gets creditCount
     *
     * @return int|null
     */
    public function getCreditCount()
    {
        return $this->container['creditCount'];
    }

    /**
     * Sets creditCount
     *
     * @param int|null $creditCount This integer value indicates the total number of the seller's sales and/or credits that match the input criteria. <br/><br/><span class=\"tablenote\"><strong>Note:</strong> Unless the <b>transactionType</b> filter is used in the request to retrieve a specific type of monetary transaction (sale, buyer refund, or seller credit), the <b>creditCount</b> and <b>creditAmount</b> fields account for both order sales and seller credits (the count and value is not distinguished between the two monetary transaction types).</span><br><br>This field is generally returned, even if <code>0</code>, but it will not be returned if a <strong>transactionType</strong> filter is used, and its value is set to either <code>REFUND</code>, <code>DISPUTE</code>, or <code>SHIPPING_LABEL</code>.
     *
     * @return self
     */
    public function setCreditCount($creditCount)
    {
        $this->container['creditCount'] = $creditCount;

        return $this;
    }

    /**
     * Gets disputeAmount
     *
     * @return \macropage\SDKs\ebay\rest\finance\Model\Amount|null
     */
    public function getDisputeAmount()
    {
        return $this->container['disputeAmount'];
    }

    /**
     * Sets disputeAmount
     *
     * @param \macropage\SDKs\ebay\rest\finance\Model\Amount|null $disputeAmount disputeAmount
     *
     * @return self
     */
    public function setDisputeAmount($disputeAmount)
    {
        $this->container['disputeAmount'] = $disputeAmount;

        return $this;
    }

    /**
     * Gets disputeBookingEntry
     *
     * @return string|null
     */
    public function getDisputeBookingEntry()
    {
        return $this->container['disputeBookingEntry'];
    }

    /**
     * Sets disputeBookingEntry
     *
     * @param string|null $disputeBookingEntry The enumeration value indicates whether the dollar amount in the <strong>disputeAmount</strong> field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be <code>DEBIT</code>, but its possible that <code>CREDIT</code> could be returned if the seller contested one or more payment disputes and won the dispute. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setDisputeBookingEntry($disputeBookingEntry)
    {
        $this->container['disputeBookingEntry'] = $disputeBookingEntry;

        return $this;
    }

    /**
     * Gets disputeCount
     *
     * @return int|null
     */
    public function getDisputeCount()
    {
        return $this->container['disputeCount'];
    }

    /**
     * Sets disputeCount
     *
     * @param int|null $disputeCount This integer value indicates the total number of payment disputes that have been initiated by one or more buyers. Only the orders that match the input criteria are considered. The Payment Disputes methods in the Fulfillment API can be used by the seller to retrieve more information about any payment disputes. <br><br>This field is generally returned, even if <code>0</code>, but it will not be returned if a <strong>transactionType</strong> filter is used, and its value is set to any value other than <code>DISPUTE</code>.
     *
     * @return self
     */
    public function setDisputeCount($disputeCount)
    {
        $this->container['disputeCount'] = $disputeCount;

        return $this;
    }

    /**
     * Gets nonSaleChargeAmount
     *
     * @return \macropage\SDKs\ebay\rest\finance\Model\Amount|null
     */
    public function getNonSaleChargeAmount()
    {
        return $this->container['nonSaleChargeAmount'];
    }

    /**
     * Sets nonSaleChargeAmount
     *
     * @param \macropage\SDKs\ebay\rest\finance\Model\Amount|null $nonSaleChargeAmount nonSaleChargeAmount
     *
     * @return self
     */
    public function setNonSaleChargeAmount($nonSaleChargeAmount)
    {
        $this->container['nonSaleChargeAmount'] = $nonSaleChargeAmount;

        return $this;
    }

    /**
     * Gets nonSaleChargeBookingEntry
     *
     * @return string|null
     */
    public function getNonSaleChargeBookingEntry()
    {
        return $this->container['nonSaleChargeBookingEntry'];
    }

    /**
     * Sets nonSaleChargeBookingEntry
     *
     * @param string|null $nonSaleChargeBookingEntry The credit/debit sign indicator for the non-sale charge. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setNonSaleChargeBookingEntry($nonSaleChargeBookingEntry)
    {
        $this->container['nonSaleChargeBookingEntry'] = $nonSaleChargeBookingEntry;

        return $this;
    }

    /**
     * Gets nonSaleChargeCount
     *
     * @return int|null
     */
    public function getNonSaleChargeCount()
    {
        return $this->container['nonSaleChargeCount'];
    }

    /**
     * Sets nonSaleChargeCount
     *
     * @param int|null $nonSaleChargeCount The total non-sale charge count for given payee within a specified period.
     *
     * @return self
     */
    public function setNonSaleChargeCount($nonSaleChargeCount)
    {
        $this->container['nonSaleChargeCount'] = $nonSaleChargeCount;

        return $this;
    }

    /**
     * Gets onHoldAmount
     *
     * @return \macropage\SDKs\ebay\rest\finance\Model\Amount|null
     */
    public function getOnHoldAmount()
    {
        return $this->container['onHoldAmount'];
    }

    /**
     * Sets onHoldAmount
     *
     * @param \macropage\SDKs\ebay\rest\finance\Model\Amount|null $onHoldAmount onHoldAmount
     *
     * @return self
     */
    public function setOnHoldAmount($onHoldAmount)
    {
        $this->container['onHoldAmount'] = $onHoldAmount;

        return $this;
    }

    /**
     * Gets onHoldBookingEntry
     *
     * @return string|null
     */
    public function getOnHoldBookingEntry()
    {
        return $this->container['onHoldBookingEntry'];
    }

    /**
     * Sets onHoldBookingEntry
     *
     * @param string|null $onHoldBookingEntry The enumeration value indicates whether the dollar amount in the <strong>onHoldAmount</strong> field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be <code>CREDIT</code>, since on-hold funds should eventually be released as part of a payout to the seller once the hold is cleared. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setOnHoldBookingEntry($onHoldBookingEntry)
    {
        $this->container['onHoldBookingEntry'] = $onHoldBookingEntry;

        return $this;
    }

    /**
     * Gets onHoldCount
     *
     * @return int|null
     */
    public function getOnHoldCount()
    {
        return $this->container['onHoldCount'];
    }

    /**
     * Sets onHoldCount
     *
     * @param int|null $onHoldCount This integer value indicates the total number of order sales where the associated funds are on hold. Only the orders that match the input criteria are considered.<br><br>This field is generally returned, even if <code>0</code>, but it will not be returned if a <strong>transactionStatus</strong> filter is used, and its value is set to any value other than <code>FUNDS_ON_HOLD</code>.
     *
     * @return self
     */
    public function setOnHoldCount($onHoldCount)
    {
        $this->container['onHoldCount'] = $onHoldCount;

        return $this;
    }

    /**
     * Gets refundAmount
     *
     * @return \macropage\SDKs\ebay\rest\finance\Model\Amount|null
     */
    public function getRefundAmount()
    {
        return $this->container['refundAmount'];
    }

    /**
     * Sets refundAmount
     *
     * @param \macropage\SDKs\ebay\rest\finance\Model\Amount|null $refundAmount refundAmount
     *
     * @return self
     */
    public function setRefundAmount($refundAmount)
    {
        $this->container['refundAmount'] = $refundAmount;

        return $this;
    }

    /**
     * Gets refundBookingEntry
     *
     * @return string|null
     */
    public function getRefundBookingEntry()
    {
        return $this->container['refundBookingEntry'];
    }

    /**
     * Sets refundBookingEntry
     *
     * @param string|null $refundBookingEntry The enumeration value indicates whether the dollar amount in the <strong>refundAmount</strong> field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be <code>DEBIT</code> since this a refund from the seller to the buyer. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setRefundBookingEntry($refundBookingEntry)
    {
        $this->container['refundBookingEntry'] = $refundBookingEntry;

        return $this;
    }

    /**
     * Gets refundCount
     *
     * @return int|null
     */
    public function getRefundCount()
    {
        return $this->container['refundCount'];
    }

    /**
     * Sets refundCount
     *
     * @param int|null $refundCount This integer value indicates the total number of buyer refunds that match the input criteria. <br><br>This field is generally returned, even if <code>0</code>, but it will not be returned if a <strong>transactionType</strong> filter is used, and its value is set to any value other than <code>REFUND</code>.
     *
     * @return self
     */
    public function setRefundCount($refundCount)
    {
        $this->container['refundCount'] = $refundCount;

        return $this;
    }

    /**
     * Gets shippingLabelAmount
     *
     * @return \macropage\SDKs\ebay\rest\finance\Model\Amount|null
     */
    public function getShippingLabelAmount()
    {
        return $this->container['shippingLabelAmount'];
    }

    /**
     * Sets shippingLabelAmount
     *
     * @param \macropage\SDKs\ebay\rest\finance\Model\Amount|null $shippingLabelAmount shippingLabelAmount
     *
     * @return self
     */
    public function setShippingLabelAmount($shippingLabelAmount)
    {
        $this->container['shippingLabelAmount'] = $shippingLabelAmount;

        return $this;
    }

    /**
     * Gets shippingLabelBookingEntry
     *
     * @return string|null
     */
    public function getShippingLabelBookingEntry()
    {
        return $this->container['shippingLabelBookingEntry'];
    }

    /**
     * Sets shippingLabelBookingEntry
     *
     * @param string|null $shippingLabelBookingEntry The enumeration value indicates whether the dollar amount in the <strong>shippingLabelAmount</strong> field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be <code>DEBIT</code>, as eBay will charge the seller when eBay shipping labels are purchased, but it can be <code>CREDIT</code> if the seller was refunded for a shipping label or was possibly overcharged for a shipping label. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setShippingLabelBookingEntry($shippingLabelBookingEntry)
    {
        $this->container['shippingLabelBookingEntry'] = $shippingLabelBookingEntry;

        return $this;
    }

    /**
     * Gets shippingLabelCount
     *
     * @return int|null
     */
    public function getShippingLabelCount()
    {
        return $this->container['shippingLabelCount'];
    }

    /**
     * Sets shippingLabelCount
     *
     * @param int|null $shippingLabelCount This is the total number of eBay shipping labels purchased by the seller. The count returned here may depend on the specified input criteria.
     *
     * @return self
     */
    public function setShippingLabelCount($shippingLabelCount)
    {
        $this->container['shippingLabelCount'] = $shippingLabelCount;

        return $this;
    }

    /**
     * Gets transferAmount
     *
     * @return \macropage\SDKs\ebay\rest\finance\Model\Amount|null
     */
    public function getTransferAmount()
    {
        return $this->container['transferAmount'];
    }

    /**
     * Sets transferAmount
     *
     * @param \macropage\SDKs\ebay\rest\finance\Model\Amount|null $transferAmount transferAmount
     *
     * @return self
     */
    public function setTransferAmount($transferAmount)
    {
        $this->container['transferAmount'] = $transferAmount;

        return $this;
    }

    /**
     * Gets transferBookingEntry
     *
     * @return string|null
     */
    public function getTransferBookingEntry()
    {
        return $this->container['transferBookingEntry'];
    }

    /**
     * Sets transferBookingEntry
     *
     * @param string|null $transferBookingEntry The enumeration value indicates whether the dollar amount in the <strong>transferAmount</strong> field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be <code>DEBIT</code> since this a seller reimbursement to eBay for buyer refunds. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setTransferBookingEntry($transferBookingEntry)
    {
        $this->container['transferBookingEntry'] = $transferBookingEntry;

        return $this;
    }

    /**
     * Gets transferCount
     *
     * @return int|null
     */
    public function getTransferCount()
    {
        return $this->container['transferCount'];
    }

    /**
     * Sets transferCount
     *
     * @param int|null $transferCount This integer value indicates the total number of buyer refund transfers that match the input criteria. <br><br>This field is generally returned, even if <code>0</code>, but it will not be returned if a <strong>transactionType</strong> filter is used, and its value is set to any value other than <code>TRANSFER</code>.
     *
     * @return self
     */
    public function setTransferCount($transferCount)
    {
        $this->container['transferCount'] = $transferCount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


