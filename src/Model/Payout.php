<?php
/**
 * Payout
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\finance
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eBay Finances API
 *
 * This API is used to retrieve seller payouts and monetary transaction details related to those payouts.
 *
 * The version of the OpenAPI document: 1.4.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\finance\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\finance\ObjectSerializer;

/**
 * Payout Class Doc Comment
 *
 * @category Class
 * @description This type is used to express the details of one seller payout that is returned with the getPayout or getPayouts methods.
 * @package  macropage\SDKs\ebay\rest\finance
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Payout implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payout';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => '\macropage\SDKs\ebay\rest\finance\Model\Amount',
        'lastAttemptedPayoutDate' => 'string',
        'payoutDate' => 'string',
        'payoutId' => 'string',
        'payoutInstrument' => '\macropage\SDKs\ebay\rest\finance\Model\PayoutInstrument',
        'payoutStatus' => 'string',
        'payoutStatusDescription' => 'string',
        'transactionCount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'lastAttemptedPayoutDate' => null,
        'payoutDate' => null,
        'payoutId' => null,
        'payoutInstrument' => null,
        'payoutStatus' => null,
        'payoutStatusDescription' => null,
        'transactionCount' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'lastAttemptedPayoutDate' => 'lastAttemptedPayoutDate',
        'payoutDate' => 'payoutDate',
        'payoutId' => 'payoutId',
        'payoutInstrument' => 'payoutInstrument',
        'payoutStatus' => 'payoutStatus',
        'payoutStatusDescription' => 'payoutStatusDescription',
        'transactionCount' => 'transactionCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'lastAttemptedPayoutDate' => 'setLastAttemptedPayoutDate',
        'payoutDate' => 'setPayoutDate',
        'payoutId' => 'setPayoutId',
        'payoutInstrument' => 'setPayoutInstrument',
        'payoutStatus' => 'setPayoutStatus',
        'payoutStatusDescription' => 'setPayoutStatusDescription',
        'transactionCount' => 'setTransactionCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'lastAttemptedPayoutDate' => 'getLastAttemptedPayoutDate',
        'payoutDate' => 'getPayoutDate',
        'payoutId' => 'getPayoutId',
        'payoutInstrument' => 'getPayoutInstrument',
        'payoutStatus' => 'getPayoutStatus',
        'payoutStatusDescription' => 'getPayoutStatusDescription',
        'transactionCount' => 'getTransactionCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['lastAttemptedPayoutDate'] = isset($data['lastAttemptedPayoutDate']) ? $data['lastAttemptedPayoutDate'] : null;
        $this->container['payoutDate'] = isset($data['payoutDate']) ? $data['payoutDate'] : null;
        $this->container['payoutId'] = isset($data['payoutId']) ? $data['payoutId'] : null;
        $this->container['payoutInstrument'] = isset($data['payoutInstrument']) ? $data['payoutInstrument'] : null;
        $this->container['payoutStatus'] = isset($data['payoutStatus']) ? $data['payoutStatus'] : null;
        $this->container['payoutStatusDescription'] = isset($data['payoutStatusDescription']) ? $data['payoutStatusDescription'] : null;
        $this->container['transactionCount'] = isset($data['transactionCount']) ? $data['transactionCount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return \macropage\SDKs\ebay\rest\finance\Model\Amount|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \macropage\SDKs\ebay\rest\finance\Model\Amount|null $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets lastAttemptedPayoutDate
     *
     * @return string|null
     */
    public function getLastAttemptedPayoutDate()
    {
        return $this->container['lastAttemptedPayoutDate'];
    }

    /**
     * Sets lastAttemptedPayoutDate
     *
     * @param string|null $lastAttemptedPayoutDate This timestamp indicates the date/time when eBay last attempted to process a seller payout but it failed. This field is only returned if a seller payout fails, and the payoutStatus value shows RETRYABLE_FAILED or TERMINAL_FAILED. A seller can filter on the lastAttemptedPayoutDate in a getPayouts request.
     *
     * @return $this
     */
    public function setLastAttemptedPayoutDate($lastAttemptedPayoutDate)
    {
        $this->container['lastAttemptedPayoutDate'] = $lastAttemptedPayoutDate;

        return $this;
    }

    /**
     * Gets payoutDate
     *
     * @return string|null
     */
    public function getPayoutDate()
    {
        return $this->container['payoutDate'];
    }

    /**
     * Sets payoutDate
     *
     * @param string|null $payoutDate This timestamp indicates when the seller payout began processing. The following format is used: YYYY-MM-DDTHH:MM:SS.SSSZ. For example, 2015-08-04T19:09:02.768Z. This field is still returned even if the payout was pending but failed (payoutStatus value shows RETRYABLE_FAILED or TERMINAL_FAILED).
     *
     * @return $this
     */
    public function setPayoutDate($payoutDate)
    {
        $this->container['payoutDate'] = $payoutDate;

        return $this;
    }

    /**
     * Gets payoutId
     *
     * @return string|null
     */
    public function getPayoutId()
    {
        return $this->container['payoutId'];
    }

    /**
     * Sets payoutId
     *
     * @param string|null $payoutId The unique identifier of the seller payout. This identifier is generated once eBay begins processing the payout to the seller's bank account.
     *
     * @return $this
     */
    public function setPayoutId($payoutId)
    {
        $this->container['payoutId'] = $payoutId;

        return $this;
    }

    /**
     * Gets payoutInstrument
     *
     * @return \macropage\SDKs\ebay\rest\finance\Model\PayoutInstrument|null
     */
    public function getPayoutInstrument()
    {
        return $this->container['payoutInstrument'];
    }

    /**
     * Sets payoutInstrument
     *
     * @param \macropage\SDKs\ebay\rest\finance\Model\PayoutInstrument|null $payoutInstrument payoutInstrument
     *
     * @return $this
     */
    public function setPayoutInstrument($payoutInstrument)
    {
        $this->container['payoutInstrument'] = $payoutInstrument;

        return $this;
    }

    /**
     * Gets payoutStatus
     *
     * @return string|null
     */
    public function getPayoutStatus()
    {
        return $this->container['payoutStatus'];
    }

    /**
     * Sets payoutStatus
     *
     * @param string|null $payoutStatus This enumeration value indicates the current status of the seller payout. For a successful payout, the value returned will be SUCCEEDED. See the PayoutStatusEnum type for more details on each payout status value. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:PayoutStatusEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setPayoutStatus($payoutStatus)
    {
        $this->container['payoutStatus'] = $payoutStatus;

        return $this;
    }

    /**
     * Gets payoutStatusDescription
     *
     * @return string|null
     */
    public function getPayoutStatusDescription()
    {
        return $this->container['payoutStatusDescription'];
    }

    /**
     * Sets payoutStatusDescription
     *
     * @param string|null $payoutStatusDescription This field provides more details about the current status of payout. The description returned here will correspond with enumeration value returned in the payoutStatus field. The following shows what description text might appear based on the different payoutStatus values: INITIATED: Preparing to send SUCCEEDED: Funds sent REVERSED: Waiting to retry : Money rejected by seller's bank RETRYABLE_FAILED: Waiting to retry TERMINAL_FAILED: Payout failed
     *
     * @return $this
     */
    public function setPayoutStatusDescription($payoutStatusDescription)
    {
        $this->container['payoutStatusDescription'] = $payoutStatusDescription;

        return $this;
    }

    /**
     * Gets transactionCount
     *
     * @return int|null
     */
    public function getTransactionCount()
    {
        return $this->container['transactionCount'];
    }

    /**
     * Sets transactionCount
     *
     * @param int|null $transactionCount This integer value indicates the number of monetary transactions (all orders, refunds, and credits, etc.) that have occurred with the corresponding payout. Its value should always be at least 1, since there is at least one order per seller payout.
     *
     * @return $this
     */
    public function setTransactionCount($transactionCount)
    {
        $this->container['transactionCount'] = $transactionCount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


