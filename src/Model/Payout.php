<?php
/**
 * Payout
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\finance
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eBay Finances API
 *
 * This API is used to retrieve seller payouts and monetary transaction details related to those payouts.
 *
 * The version of the OpenAPI document: 1.9.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\finance\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\finance\ObjectSerializer;

/**
 * Payout Class Doc Comment
 *
 * @category Class
 * @description This type is used to express the details of one seller payout that is returned with the &lt;strong&gt;getPayout&lt;/strong&gt; or &lt;strong&gt;getPayouts&lt;/strong&gt; methods.
 * @package  macropage\SDKs\ebay\rest\finance
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Payout implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payout';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => '\macropage\SDKs\ebay\rest\finance\Model\Amount',
        'bankReference' => 'string',
        'lastAttemptedPayoutDate' => 'string',
        'payoutDate' => 'string',
        'payoutId' => 'string',
        'payoutMemo' => 'string',
        'payoutInstrument' => '\macropage\SDKs\ebay\rest\finance\Model\PayoutInstrument',
        'payoutStatus' => 'string',
        'payoutStatusDescription' => 'string',
        'transactionCount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'bankReference' => null,
        'lastAttemptedPayoutDate' => null,
        'payoutDate' => null,
        'payoutId' => null,
        'payoutMemo' => null,
        'payoutInstrument' => null,
        'payoutStatus' => null,
        'payoutStatusDescription' => null,
        'transactionCount' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'bankReference' => 'bankReference',
        'lastAttemptedPayoutDate' => 'lastAttemptedPayoutDate',
        'payoutDate' => 'payoutDate',
        'payoutId' => 'payoutId',
        'payoutMemo' => 'payoutMemo',
        'payoutInstrument' => 'payoutInstrument',
        'payoutStatus' => 'payoutStatus',
        'payoutStatusDescription' => 'payoutStatusDescription',
        'transactionCount' => 'transactionCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'bankReference' => 'setBankReference',
        'lastAttemptedPayoutDate' => 'setLastAttemptedPayoutDate',
        'payoutDate' => 'setPayoutDate',
        'payoutId' => 'setPayoutId',
        'payoutMemo' => 'setPayoutMemo',
        'payoutInstrument' => 'setPayoutInstrument',
        'payoutStatus' => 'setPayoutStatus',
        'payoutStatusDescription' => 'setPayoutStatusDescription',
        'transactionCount' => 'setTransactionCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'bankReference' => 'getBankReference',
        'lastAttemptedPayoutDate' => 'getLastAttemptedPayoutDate',
        'payoutDate' => 'getPayoutDate',
        'payoutId' => 'getPayoutId',
        'payoutMemo' => 'getPayoutMemo',
        'payoutInstrument' => 'getPayoutInstrument',
        'payoutStatus' => 'getPayoutStatus',
        'payoutStatusDescription' => 'getPayoutStatusDescription',
        'transactionCount' => 'getTransactionCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['bankReference'] = $data['bankReference'] ?? null;
        $this->container['lastAttemptedPayoutDate'] = $data['lastAttemptedPayoutDate'] ?? null;
        $this->container['payoutDate'] = $data['payoutDate'] ?? null;
        $this->container['payoutId'] = $data['payoutId'] ?? null;
        $this->container['payoutMemo'] = $data['payoutMemo'] ?? null;
        $this->container['payoutInstrument'] = $data['payoutInstrument'] ?? null;
        $this->container['payoutStatus'] = $data['payoutStatus'] ?? null;
        $this->container['payoutStatusDescription'] = $data['payoutStatusDescription'] ?? null;
        $this->container['transactionCount'] = $data['transactionCount'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return \macropage\SDKs\ebay\rest\finance\Model\Amount|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \macropage\SDKs\ebay\rest\finance\Model\Amount|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets bankReference
     *
     * @return string|null
     */
    public function getBankReference()
    {
        return $this->container['bankReference'];
    }

    /**
     * Sets bankReference
     *
     * @param string|null $bankReference This field contains additional information provided by the bank and passed on by the payment processor; e.g., the manner in which the transaction will appear on the seller's bank statement. The field is returned only when provided by the bank and processor.
     *
     * @return self
     */
    public function setBankReference($bankReference)
    {
        $this->container['bankReference'] = $bankReference;

        return $this;
    }

    /**
     * Gets lastAttemptedPayoutDate
     *
     * @return string|null
     */
    public function getLastAttemptedPayoutDate()
    {
        return $this->container['lastAttemptedPayoutDate'];
    }

    /**
     * Sets lastAttemptedPayoutDate
     *
     * @param string|null $lastAttemptedPayoutDate This timestamp indicates the date/time when eBay last attempted to process a seller payout but it failed. This field is only returned if a seller payout fails, and the <strong>payoutStatus</strong> value shows <code>RETRYABLE_FAILED</code> or <code>TERMINAL_FAILED</code>. A seller can filter on the <b>lastAttemptedPayoutDate</b> in a <b>getPayouts</b> request.
     *
     * @return self
     */
    public function setLastAttemptedPayoutDate($lastAttemptedPayoutDate)
    {
        $this->container['lastAttemptedPayoutDate'] = $lastAttemptedPayoutDate;

        return $this;
    }

    /**
     * Gets payoutDate
     *
     * @return string|null
     */
    public function getPayoutDate()
    {
        return $this->container['payoutDate'];
    }

    /**
     * Sets payoutDate
     *
     * @param string|null $payoutDate This timestamp indicates when the seller payout began processing. The following format is used: <code>YYYY-MM-DDTHH:MM:SS.SSSZ</code>. For example, <code>2015-08-04T19:09:02.768Z</code>. This field is still returned even if the payout was pending but failed (<strong>payoutStatus</strong> value shows <code>RETRYABLE_FAILED</code> or <code>TERMINAL_FAILED</code>).
     *
     * @return self
     */
    public function setPayoutDate($payoutDate)
    {
        $this->container['payoutDate'] = $payoutDate;

        return $this;
    }

    /**
     * Gets payoutId
     *
     * @return string|null
     */
    public function getPayoutId()
    {
        return $this->container['payoutId'];
    }

    /**
     * Sets payoutId
     *
     * @param string|null $payoutId The unique identifier of the seller payout. This identifier is generated once eBay begins processing the payout to the seller's bank account.
     *
     * @return self
     */
    public function setPayoutId($payoutId)
    {
        $this->container['payoutId'] = $payoutId;

        return $this;
    }

    /**
     * Gets payoutMemo
     *
     * @return string|null
     */
    public function getPayoutMemo()
    {
        return $this->container['payoutMemo'];
    }

    /**
     * Sets payoutMemo
     *
     * @param string|null $payoutMemo This field contains information provided by upstream components, based on internal and external commitments. A typical message would contain the expected arrival time of the payout.
     *
     * @return self
     */
    public function setPayoutMemo($payoutMemo)
    {
        $this->container['payoutMemo'] = $payoutMemo;

        return $this;
    }

    /**
     * Gets payoutInstrument
     *
     * @return \macropage\SDKs\ebay\rest\finance\Model\PayoutInstrument|null
     */
    public function getPayoutInstrument()
    {
        return $this->container['payoutInstrument'];
    }

    /**
     * Sets payoutInstrument
     *
     * @param \macropage\SDKs\ebay\rest\finance\Model\PayoutInstrument|null $payoutInstrument payoutInstrument
     *
     * @return self
     */
    public function setPayoutInstrument($payoutInstrument)
    {
        $this->container['payoutInstrument'] = $payoutInstrument;

        return $this;
    }

    /**
     * Gets payoutStatus
     *
     * @return string|null
     */
    public function getPayoutStatus()
    {
        return $this->container['payoutStatus'];
    }

    /**
     * Sets payoutStatus
     *
     * @param string|null $payoutStatus This enumeration value indicates the current status of the seller payout. For a successful payout, the value returned will be <code>SUCCEEDED</code>. See the <strong>PayoutStatusEnum</strong> type for more details on each payout status value. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:PayoutStatusEnum'>eBay API documentation</a>
     *
     * @return self
     */
    public function setPayoutStatus($payoutStatus)
    {
        $this->container['payoutStatus'] = $payoutStatus;

        return $this;
    }

    /**
     * Gets payoutStatusDescription
     *
     * @return string|null
     */
    public function getPayoutStatusDescription()
    {
        return $this->container['payoutStatusDescription'];
    }

    /**
     * Sets payoutStatusDescription
     *
     * @param string|null $payoutStatusDescription This field provides more details about the current status of payout. The description returned here will correspond with enumeration value returned in the <strong>payoutStatus</strong> field. The following shows what description text might appear based on the different <strong>payoutStatus</strong> values:<ul><li><code>INITIATED</code>: <em>Preparing to send</em></li><li><code>SUCCEEDED</code>: <em>Funds sent</em></li><li><code>REVERSED</code>: <em>Waiting to retry : Money rejected by seller's bank</em></li><li><code>RETRYABLE_FAILED</code>: <em>Waiting to retry</em></li><li><code>TERMINAL_FAILED</code>: <em>Payout failed</em></li></ul>
     *
     * @return self
     */
    public function setPayoutStatusDescription($payoutStatusDescription)
    {
        $this->container['payoutStatusDescription'] = $payoutStatusDescription;

        return $this;
    }

    /**
     * Gets transactionCount
     *
     * @return int|null
     */
    public function getTransactionCount()
    {
        return $this->container['transactionCount'];
    }

    /**
     * Sets transactionCount
     *
     * @param int|null $transactionCount This integer value indicates the number of monetary transactions (all orders, refunds, and credits, etc.) that have occurred with the corresponding payout. Its value should always be at least <code>1</code>, since there is at least one order per seller payout.
     *
     * @return self
     */
    public function setTransactionCount($transactionCount)
    {
        $this->container['transactionCount'] = $transactionCount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


