<?php
/**
 * SellerFundsSummaryResponse
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\finance
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eBay Finances API
 *
 * This API is used to retrieve seller payouts and monetary transaction details related to those payouts.
 *
 * The version of the OpenAPI document: 1.4.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\finance\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\finance\ObjectSerializer;

/**
 * SellerFundsSummaryResponse Class Doc Comment
 *
 * @category Class
 * @description This type is used by the response payload of the getSellerFundsSummary method. All of the funds returned in getSellerFundsSummary are funds that have not yet been paid to the seller through a seller payout. If there are no funds that are pending, on hold, or being processed for the seller&#39;s account, no response payload is returned, and an http status code of 204 - No Content is returned instead.
 * @package  macropage\SDKs\ebay\rest\finance
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SellerFundsSummaryResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SellerFundsSummaryResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'availableFunds' => '\macropage\SDKs\ebay\rest\finance\Model\Amount',
        'fundsOnHold' => '\macropage\SDKs\ebay\rest\finance\Model\Amount',
        'processingFunds' => '\macropage\SDKs\ebay\rest\finance\Model\Amount',
        'totalFunds' => '\macropage\SDKs\ebay\rest\finance\Model\Amount'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'availableFunds' => null,
        'fundsOnHold' => null,
        'processingFunds' => null,
        'totalFunds' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'availableFunds' => 'availableFunds',
        'fundsOnHold' => 'fundsOnHold',
        'processingFunds' => 'processingFunds',
        'totalFunds' => 'totalFunds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'availableFunds' => 'setAvailableFunds',
        'fundsOnHold' => 'setFundsOnHold',
        'processingFunds' => 'setProcessingFunds',
        'totalFunds' => 'setTotalFunds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'availableFunds' => 'getAvailableFunds',
        'fundsOnHold' => 'getFundsOnHold',
        'processingFunds' => 'getProcessingFunds',
        'totalFunds' => 'getTotalFunds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['availableFunds'] = isset($data['availableFunds']) ? $data['availableFunds'] : null;
        $this->container['fundsOnHold'] = isset($data['fundsOnHold']) ? $data['fundsOnHold'] : null;
        $this->container['processingFunds'] = isset($data['processingFunds']) ? $data['processingFunds'] : null;
        $this->container['totalFunds'] = isset($data['totalFunds']) ? $data['totalFunds'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets availableFunds
     *
     * @return \macropage\SDKs\ebay\rest\finance\Model\Amount|null
     */
    public function getAvailableFunds()
    {
        return $this->container['availableFunds'];
    }

    /**
     * Sets availableFunds
     *
     * @param \macropage\SDKs\ebay\rest\finance\Model\Amount|null $availableFunds availableFunds
     *
     * @return $this
     */
    public function setAvailableFunds($availableFunds)
    {
        $this->container['availableFunds'] = $availableFunds;

        return $this;
    }

    /**
     * Gets fundsOnHold
     *
     * @return \macropage\SDKs\ebay\rest\finance\Model\Amount|null
     */
    public function getFundsOnHold()
    {
        return $this->container['fundsOnHold'];
    }

    /**
     * Sets fundsOnHold
     *
     * @param \macropage\SDKs\ebay\rest\finance\Model\Amount|null $fundsOnHold fundsOnHold
     *
     * @return $this
     */
    public function setFundsOnHold($fundsOnHold)
    {
        $this->container['fundsOnHold'] = $fundsOnHold;

        return $this;
    }

    /**
     * Gets processingFunds
     *
     * @return \macropage\SDKs\ebay\rest\finance\Model\Amount|null
     */
    public function getProcessingFunds()
    {
        return $this->container['processingFunds'];
    }

    /**
     * Sets processingFunds
     *
     * @param \macropage\SDKs\ebay\rest\finance\Model\Amount|null $processingFunds processingFunds
     *
     * @return $this
     */
    public function setProcessingFunds($processingFunds)
    {
        $this->container['processingFunds'] = $processingFunds;

        return $this;
    }

    /**
     * Gets totalFunds
     *
     * @return \macropage\SDKs\ebay\rest\finance\Model\Amount|null
     */
    public function getTotalFunds()
    {
        return $this->container['totalFunds'];
    }

    /**
     * Sets totalFunds
     *
     * @param \macropage\SDKs\ebay\rest\finance\Model\Amount|null $totalFunds totalFunds
     *
     * @return $this
     */
    public function setTotalFunds($totalFunds)
    {
        $this->container['totalFunds'] = $totalFunds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


