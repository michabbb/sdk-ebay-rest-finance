<?php
/**
 * Charge
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\finance
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * eBay Finances API
 *
 * This API is used to retrieve seller payouts and monetary transaction details related to those payouts.
 *
 * The version of the OpenAPI document: 1.4.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\finance\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\finance\ObjectSerializer;

/**
 * Charge Class Doc Comment
 *
 * @category Class
 * @description This type is used by the charge container, which is an array of one or more charges related to the transfer.
 * @package  macropage\SDKs\ebay\rest\finance
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Charge implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Charge';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cancellationId' => 'string',
        'caseId' => 'string',
        'chargeNetAmount' => '\macropage\SDKs\ebay\rest\finance\Model\Amount',
        'inquiryId' => 'string',
        'orderId' => 'string',
        'paymentDisputeId' => 'string',
        'refundId' => 'string',
        'returnId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'cancellationId' => null,
        'caseId' => null,
        'chargeNetAmount' => null,
        'inquiryId' => null,
        'orderId' => null,
        'paymentDisputeId' => null,
        'refundId' => null,
        'returnId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cancellationId' => 'cancellationId',
        'caseId' => 'caseId',
        'chargeNetAmount' => 'chargeNetAmount',
        'inquiryId' => 'inquiryId',
        'orderId' => 'orderId',
        'paymentDisputeId' => 'paymentDisputeId',
        'refundId' => 'refundId',
        'returnId' => 'returnId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cancellationId' => 'setCancellationId',
        'caseId' => 'setCaseId',
        'chargeNetAmount' => 'setChargeNetAmount',
        'inquiryId' => 'setInquiryId',
        'orderId' => 'setOrderId',
        'paymentDisputeId' => 'setPaymentDisputeId',
        'refundId' => 'setRefundId',
        'returnId' => 'setReturnId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cancellationId' => 'getCancellationId',
        'caseId' => 'getCaseId',
        'chargeNetAmount' => 'getChargeNetAmount',
        'inquiryId' => 'getInquiryId',
        'orderId' => 'getOrderId',
        'paymentDisputeId' => 'getPaymentDisputeId',
        'refundId' => 'getRefundId',
        'returnId' => 'getReturnId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cancellationId'] = isset($data['cancellationId']) ? $data['cancellationId'] : null;
        $this->container['caseId'] = isset($data['caseId']) ? $data['caseId'] : null;
        $this->container['chargeNetAmount'] = isset($data['chargeNetAmount']) ? $data['chargeNetAmount'] : null;
        $this->container['inquiryId'] = isset($data['inquiryId']) ? $data['inquiryId'] : null;
        $this->container['orderId'] = isset($data['orderId']) ? $data['orderId'] : null;
        $this->container['paymentDisputeId'] = isset($data['paymentDisputeId']) ? $data['paymentDisputeId'] : null;
        $this->container['refundId'] = isset($data['refundId']) ? $data['refundId'] : null;
        $this->container['returnId'] = isset($data['returnId']) ? $data['returnId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cancellationId
     *
     * @return string|null
     */
    public function getCancellationId()
    {
        return $this->container['cancellationId'];
    }

    /**
     * Sets cancellationId
     *
     * @param string|null $cancellationId The unique identifier of an order cancellation. This field is only applicable and returned if the charge is related to an order cancellation.
     *
     * @return $this
     */
    public function setCancellationId($cancellationId)
    {
        $this->container['cancellationId'] = $cancellationId;

        return $this;
    }

    /**
     * Gets caseId
     *
     * @return string|null
     */
    public function getCaseId()
    {
        return $this->container['caseId'];
    }

    /**
     * Sets caseId
     *
     * @param string|null $caseId The unique identifier of a case filed against an order. This field is only applicable and returned if the charge is related to a case filed against an order.
     *
     * @return $this
     */
    public function setCaseId($caseId)
    {
        $this->container['caseId'] = $caseId;

        return $this;
    }

    /**
     * Gets chargeNetAmount
     *
     * @return \macropage\SDKs\ebay\rest\finance\Model\Amount|null
     */
    public function getChargeNetAmount()
    {
        return $this->container['chargeNetAmount'];
    }

    /**
     * Sets chargeNetAmount
     *
     * @param \macropage\SDKs\ebay\rest\finance\Model\Amount|null $chargeNetAmount chargeNetAmount
     *
     * @return $this
     */
    public function setChargeNetAmount($chargeNetAmount)
    {
        $this->container['chargeNetAmount'] = $chargeNetAmount;

        return $this;
    }

    /**
     * Gets inquiryId
     *
     * @return string|null
     */
    public function getInquiryId()
    {
        return $this->container['inquiryId'];
    }

    /**
     * Sets inquiryId
     *
     * @param string|null $inquiryId The unique identifier of an Item Not Received (INR) inquiry filed against an order. This field is only applicable and returned if the charge is related to has an INR inquiry filed against the order.
     *
     * @return $this
     */
    public function setInquiryId($inquiryId)
    {
        $this->container['inquiryId'] = $inquiryId;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param string|null $orderId The unique identifier of the order that is associated with the charge.
     *
     * @return $this
     */
    public function setOrderId($orderId)
    {
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets paymentDisputeId
     *
     * @return string|null
     */
    public function getPaymentDisputeId()
    {
        return $this->container['paymentDisputeId'];
    }

    /**
     * Sets paymentDisputeId
     *
     * @param string|null $paymentDisputeId The unique identifier of a third-party payment dispute filed against an order. This occurs when the buyer files a dispute against the order with their payment provider, and then the dispute comes into eBay's system. This field is only applicable and returned if the charge is related to a third-party payment dispute filed against an order.
     *
     * @return $this
     */
    public function setPaymentDisputeId($paymentDisputeId)
    {
        $this->container['paymentDisputeId'] = $paymentDisputeId;

        return $this;
    }

    /**
     * Gets refundId
     *
     * @return string|null
     */
    public function getRefundId()
    {
        return $this->container['refundId'];
    }

    /**
     * Sets refundId
     *
     * @param string|null $refundId The unique identifier of a buyer refund associated with the charge.
     *
     * @return $this
     */
    public function setRefundId($refundId)
    {
        $this->container['refundId'] = $refundId;

        return $this;
    }

    /**
     * Gets returnId
     *
     * @return string|null
     */
    public function getReturnId()
    {
        return $this->container['returnId'];
    }

    /**
     * Sets returnId
     *
     * @param string|null $returnId The unique identifier of an order return. This field is only applicable and returned if the charge is related to an order that was returned by the buyer.
     *
     * @return $this
     */
    public function setReturnId($returnId)
    {
        $this->container['returnId'] = $returnId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


